// Generated by build.rs
declare type Presentation = {
    classStateThinking: (args: {  }) => { value: string };
    classStateInvalid: (args: {  }) => { value: string };
    classStateDeleted: (args: {  }) => { value: string };
    classStatePlaying: (args: {  }) => { value: string };
    contGroup: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contStack: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    leafAsyncBlock: (args: {  }) => { root: HTMLElement };
    leafErrBlock: (args: { data: string }) => { root: HTMLElement };
    contTitle: (args: { left: HTMLElement, right?: HTMLElement }) => { root: HTMLElement };
    leafTitle: (args: { text: string }) => { root: HTMLElement };
    contBar: (args: { extraStyles: string[], leftChildren: HTMLElement[], leftMidChildren: HTMLElement[], midChildren: HTMLElement[], rightMidChildren: HTMLElement[], rightChildren: HTMLElement[] }) => { root: HTMLElement };
    contBarMainForm: (args: { leftChildren: HTMLElement[], leftMidChildren: HTMLElement[], midChildren: HTMLElement[], rightMidChildren: HTMLElement[], rightChildren: HTMLElement[] }) => { root: HTMLElement };
    contBarMenu: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contSpinner: (args: {  }) => { root: HTMLElement };
    leafSpace: (args: {  }) => { root: HTMLElement };
    leafButtonBig: (args: { title: string, icon?: string, text?: string }) => { root: HTMLElement };
    leafButtonBigSave: (args: {  }) => { root: HTMLElement };
    contPageHome: (args: {  }) => { root: HTMLElement };
    leafInputText: (args: { id?: string, title: string, value: string }) => { root: HTMLInputElement };
    leafInputNumber: (args: { id?: string, title: string, value: string }) => { root: HTMLInputElement };
    leafInputBool: (args: { id?: string, title: string, value: boolean }) => { root: HTMLInputElement };
    leafInputDate: (args: { id?: string, title: string, value: string }) => { root: HTMLInputElement };
    leafInputTime: (args: { id?: string, title: string, value: string }) => { root: HTMLInputElement };
    leafInputDatetime: (args: { id?: string, title: string, value: string }) => { root: HTMLInputElement };
    leafInputColor: (args: { id?: string, title: string, value: string }) => { root: HTMLInputElement };
    leafInputEnum: (args: { id?: string, title: string, options: {[k: string]: string}, value: string }) => { root: HTMLSelectElement };
    leafInputPair: (args: { label: string, inputId: string, input: HTMLElement }) => { root: HTMLElement };
    leafInputPairText: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairNumber: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairBool: (args: { id: string, title: string, value: boolean }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairDate: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairTime: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairDatetime: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairColor: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLInputElement };
    leafInputPairEnum: (args: { id: string, title: string, value: string, options: {[k: string]: string} }) => { root: HTMLElement, input: HTMLSelectElement };
    contPageView: (args: { entries: HTMLElement[] }) => { root: HTMLElement };
    contPageViewList: (args: { transport?: HTMLElement, rows: HTMLElement }) => { root: HTMLElement };
    contBarViewTransport: (args: {  }) => { root: HTMLElement, buttonShare: HTMLElement, buttonPrev: HTMLElement, buttonNext: HTMLElement, buttonPlay: HTMLElement, seekbar: HTMLElement, seekbarFill: HTMLElement, seekbarLabel: HTMLElement };
    contMediaFullscreen: (args: { media: HTMLElement }) => { root: HTMLElement, buttonClose: HTMLElement };
    contModalViewShare: (args: { qr: HTMLElement, link: string }) => { root: HTMLElement, bg: HTMLElement, buttonClose: HTMLElement, buttonUnshare: HTMLElement };
    contViewList: (args: { direction: Direction, xScroll: boolean, children: HTMLElement[], gap?: string }) => { root: HTMLElement };
    contViewTable: (args: { orientation: Orientation, xScroll: boolean, children: HTMLElement[][], gap?: string }) => { root: HTMLElement };
    leafViewImage: (args: { transAlign: TransAlign, url?: string, text?: string, width?: string, height?: string }) => { root: HTMLElement };
    leafViewText: (args: { transAlign: TransAlign, orientation: Orientation, text: string, fontSize?: string, maxSize?: string, url?: string }) => { root: HTMLElement };
    leafViewPlayButton: (args: { transAlign: TransAlign, direction: Direction }) => { root: HTMLElement };
    contPageForm: (args: { entries: HTMLElement[], barChildren: HTMLElement[] }) => { root: HTMLElement };
    leafFormComment: (args: { text: string }) => { root: HTMLElement };
    contPageEdit: (args: { children: HTMLElement[], barChildren: HTMLElement[] }) => { root: HTMLElement };
    contPageEditSectionRel: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    leafButtonEditAdd: (args: { hint: string }) => { root: HTMLElement };
    leafEditNode: (args: { inputType: HTMLElement, inputValue: HTMLElement }) => { root: HTMLElement, buttonDelete: HTMLElement, buttonRevert: HTMLElement };
    leafEditPredicate: (args: { value: string }) => { root: HTMLElement };
    contEditRowIncoming: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contEditRowOutgoing: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contEditSectionCenter: (args: { child: HTMLElement }) => { root: HTMLElement };
    contMenuBody: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contMenuGroup: (args: { title: string, children: HTMLElement[] }) => { root: HTMLElement };
    leafMenuLink: (args: { title: string, href: string }) => { root: HTMLElement };
    appMain: (args: { mainTitle: HTMLElement, mainBody: HTMLElement, menuBody: HTMLElement }) => { root: HTMLElement };
    appLink: (args: {  }) => { root: HTMLElement, display: HTMLElement, display_over: HTMLElement, album: HTMLElement, artist: HTMLElement, title: HTMLElement };
};