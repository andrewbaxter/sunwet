// Generated by build.rs
declare type Presentation = {
    attrState: (args: {  }) => { value: string };
    attrStatePlaying: (args: {  }) => { value: string };
    classMenuWantStateOpen: (args: {  }) => { value: string };
    classMenuStateOpen: (args: {  }) => { value: string };
    classStateHide: (args: {  }) => { value: string };
    classStateDisabled: (args: {  }) => { value: string };
    classStatePressed: (args: {  }) => { value: string };
    classStateThinking: (args: {  }) => { value: string };
    classStateModified: (args: {  }) => { value: string };
    classStateInvalid: (args: {  }) => { value: string };
    classStateDeleted: (args: {  }) => { value: string };
    classStateSharing: (args: {  }) => { value: string };
    contGroup: (args: { children: Element[] }) => { root: Element };
    contStack: (args: { children: Element[] }) => { root: Element };
    contVbox: (args: { children: Element[] }) => { root: Element };
    contRootStack: (args: { children: Element[] }) => { root: Element };
    leafAsyncBlock: (args: { inRoot: boolean }) => { root: Element };
    leafErrBlock: (args: { data: string, inRoot: boolean }) => { root: Element };
    contTitle: (args: { left: Element, right?: Element }) => { root: Element };
    leafTitle: (args: { text: string }) => { root: Element };
    contBar: (args: { extraStyles: string[], leftChildren: Element[], leftMidChildren: Element[], midChildren: Element[], rightMidChildren: Element[], rightChildren: Element[] }) => { root: Element };
    contBarMainForm: (args: { leftChildren: Element[], leftMidChildren: Element[], midChildren: Element[], rightMidChildren: Element[], rightChildren: Element[] }) => { root: Element };
    leafSpinner: (args: { extraStyles: string[] }) => { root: Element };
    leafSpace: (args: {  }) => { root: Element };
    leafButtonBig: (args: { title: string, icon?: string, text?: string }) => { root: Element };
    leafButtonBigCommit: (args: {  }) => { root: Element };
    leafButtonSmallEdit: (args: { link: string }) => { root: Element };
    leafButtonSmallView: (args: { link: string }) => { root: Element };
    leafMediaImg: (args: { src: string }) => { root: Element };
    leafMediaAudio: (args: { src: string }) => { root: Element };
    leafMediaVideo: (args: { src: string }) => { root: Element };
    contPageHome: (args: {  }) => { root: Element };
    leafInputText: (args: { id?: string, title: string, value: string }) => { root: Element };
    leafInputNumber: (args: { id?: string, title: string, value: string }) => { root: Element };
    leafInputBool: (args: { id?: string, title: string, value: boolean }) => { root: Element };
    leafInputDate: (args: { id?: string, title: string, value: string }) => { root: Element };
    leafInputTime: (args: { id?: string, title: string, value: string }) => { root: Element };
    leafInputDatetime: (args: { id?: string, title: string, value: string }) => { root: Element };
    leafInputColor: (args: { id?: string, title: string, value: string }) => { root: Element };
    leafInputEnum: (args: { id?: string, title: string, options: {[k: string]: string}, value: string }) => { root: Element };
    leafInputTextMedia: (args: { id?: string, title: string, value: string }) => { root: Element, input: Element, media: Element };
    leafInputFile: (args: { id?: string, title: string }) => { root: Element, input: Element };
    leafInputPair: (args: { label: string, inputId: string, input: Element }) => { root: Element };
    leafInputPairText: (args: { id: string, title: string, value: string }) => { root: Element, input: Element };
    leafInputPairNumber: (args: { id: string, title: string, value: string }) => { root: Element, input: Element };
    leafInputPairBool: (args: { id: string, title: string, value: boolean }) => { root: Element, input: Element };
    leafInputPairDate: (args: { id: string, title: string, value: string }) => { root: Element, input: Element };
    leafInputPairTime: (args: { id: string, title: string, value: string }) => { root: Element, input: Element };
    leafInputPairDatetime: (args: { id: string, title: string, value: string }) => { root: Element, input: Element };
    leafInputPairColor: (args: { id: string, title: string, value: string }) => { root: Element, input: Element };
    leafInputPairEnum: (args: { id: string, title: string, value: string, options: {[k: string]: string} }) => { root: Element, input: Element };
    leafInputPairFile: (args: { id: string, title: string }) => { root: Element, input: Element };
    contPageView: (args: { transport?: Element, params: Element[], rows: Element }) => { root: Element };
    contBarViewTransport: (args: {  }) => { root: Element, buttonShare: Element, buttonPrev: Element, buttonNext: Element, buttonPlay: Element, seekbar: Element, seekbarFill: Element, seekbarLabel: Element };
    contViewRootRows: (args: { rows: Element[] }) => { root: Element };
    contViewRow: (args: { blocks: Element[] }) => { root: Element };
    contViewBlock: (args: { children: Element[], width?: string }) => { root: Element };
    contMediaFullscreen: (args: { media: Element }) => { root: Element, buttonClose: Element, buttonFullscreen: Element };
    contModalViewShare: (args: { qr: Element, link: string }) => { root: Element, bg: Element, buttonClose: Element, buttonUnshare: Element };
    contViewList: (args: { direction: Direction, transAlign: TransAlign, xScroll: boolean, children: Element[], gap?: string, wrap: boolean }) => { root: Element };
    contViewTable: (args: { orientation: Orientation, xScroll: boolean, children: Element[][], gap?: string }) => { root: Element };
    leafViewImage: (args: { transAlign: TransAlign, src: string, link?: string, text?: string, width?: string, height?: string }) => { root: Element };
    leafViewVideo: (args: { transAlign: TransAlign, src: string, link?: string, text?: string, width?: string, height?: string }) => { root: Element };
    leafViewAudio: (args: { transAlign: TransAlign, direction: Direction, src: string, link?: string, text?: string, length?: string }) => { root: Element };
    leafViewText: (args: { transAlign: TransAlign, orientation: Orientation, text: string, fontSize?: string, maxSize?: string, link?: string, color?: string }) => { root: Element };
    leafViewPlayButton: (args: { transAlign: TransAlign, orientation: Orientation, image?: string, width?: string, height?: string }) => { root: Element };
    leafViewColor: (args: { transAlign: TransAlign, color: string, width: string, height: string }) => { root: Element };
    leafViewDatetime: (args: { transAlign: TransAlign, orientation: Orientation, value: string, fontSize?: string }) => { root: Element };
    leafViewDate: (args: { transAlign: TransAlign, orientation: Orientation, value: string, fontSize?: string }) => { root: Element };
    leafViewTime: (args: { transAlign: TransAlign, orientation: Orientation, value: string, fontSize?: string }) => { root: Element };
    contMediaComicOuter: (args: { children: Element[] }) => { root: Element };
    contMediaComicInner: (args: { minAspectX: string, minAspectY: string, children: Element[], rtl: boolean }) => { root: Element, contScroll: Element };
    leafMediaComicMidPad: (args: {  }) => { root: Element };
    leafMediaComicEndPad: (args: {  }) => { root: Element };
    leafMediaComicPage: (args: { src: string, aspectX: string, aspectY: string }) => { root: Element };
    contPageForm: (args: { entries: Element[], barChildren: Element[] }) => { root: Element };
    leafFormComment: (args: { text: string }) => { root: Element };
    contPageNode: (args: { pageButtonChildren: Element[], barChildren: Element[], children: Element[] }) => { root: Element, body: Element };
    contPageNodeSectionRel: (args: { children: Element[] }) => { root: Element };
    contNodeRowIncoming: (args: { children: Element[], new: boolean }) => { root: Element };
    contNodeRowOutgoing: (args: { children: Element[], new: boolean }) => { root: Element };
    contNodeSectionCenter: (args: { children: Element[] }) => { root: Element };
    leafNodeViewNodeButtons: (args: { download?: string, history?: string }) => { root: Element };
    leafNodeViewPredicate: (args: { value: string }) => { root: Element };
    leafNodeViewNodeText: (args: { value: string, link?: string }) => { root: Element };
    contNodeRowIncomingAdd: (args: { hint: string }) => { root: Element, button: Element };
    contNodeRowOutgoingAdd: (args: { hint: string }) => { root: Element, button: Element };
    leafNodeEditButtons: (args: {  }) => { root: Element, buttonDelete: Element, buttonRevert: Element };
    leafNodeEditNode: (args: { inputType: Element, inputValue: Element }) => { root: Element };
    leafNodeEditPredicate: (args: { value: string }) => { root: Element };
    contPageHistory: (args: { pageButtonChildren: Element[], barChildren: Element[], children: Element[] }) => { root: Element, body: Element };
    contHistoryCommit: (args: { stamp: string, desc: string }) => { root: Element };
    contHistorySubject: (args: { center: Element[] }) => { root: Element };
    contHistoryPredicateObjectRemove: (args: { children: Element[] }) => { root: Element, button: Element };
    contHistoryPredicateObjectAdd: (args: { children: Element[] }) => { root: Element, button: Element };
    contPageQuery: (args: { initialQuery: string }) => { root: Element, query: Element, results: Element };
    leafQueryRow: (args: { data: string }) => { root: Element };
    contBarMenu: (args: { children: Element[] }) => { root: Element };
    leafMenuBarButtonLogin: (args: {  }) => { root: Element };
    leafMenuBarButtonLogout: (args: {  }) => { root: Element };
    contMenuBody: (args: { children: Element[], user: string, barChildren: Element[] }) => { root: Element };
    contMenuGroup: (args: { title: string, children: Element[] }) => { root: Element };
    leafMenuLink: (args: { title: string, href: string }) => { root: Element };
    appMain: (args: { mainTitle: Element, mainBody: Element, menuBody: Element }) => { root: Element, admenuButton: Element };
    appLinkPerms: (args: {  }) => { root: Element, button: Element };
    appLink: (args: {  }) => { root: Element, displayUnder: Element, display: Element, displayOver: Element, albumArtist: Element, title: Element };
};