// Generated by build.rs
declare type Presentation = {
    attrState: (args: {  }) => { value: string };
    attrStatePlaying: (args: {  }) => { value: string };
    classMenuWantStateOpen: (args: {  }) => { value: string };
    classMenuStateOpen: (args: {  }) => { value: string };
    classStateHide: (args: {  }) => { value: string };
    classStateDisabled: (args: {  }) => { value: string };
    classStatePressed: (args: {  }) => { value: string };
    classStateThinking: (args: {  }) => { value: string };
    classStateModified: (args: {  }) => { value: string };
    classStateInvalid: (args: {  }) => { value: string };
    classStateDeleted: (args: {  }) => { value: string };
    classStateSharing: (args: {  }) => { value: string };
    classStateElementSelected: (args: {  }) => { value: string };
    classStateSelected: (args: {  }) => { value: string };
    contGroup: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contStack: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contVbox: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contRootStack: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    leafAsyncBlock: (args: { inRoot: boolean }) => { root: HTMLElement };
    leafErrBlock: (args: { data: string, inRoot: boolean }) => { root: HTMLElement };
    contTitle: (args: { left: HTMLElement, right?: HTMLElement }) => { root: HTMLElement };
    leafTitle: (args: { text: string }) => { root: HTMLElement };
    contBar: (args: { extraStyles: string[], leftChildren: HTMLElement[], leftMidChildren: HTMLElement[], midChildren: HTMLElement[], rightMidChildren: HTMLElement[], rightChildren: HTMLElement[] }) => { root: HTMLElement };
    leafSpinner: (args: { extraStyles: string[] }) => { root: HTMLElement };
    leafSpace: (args: {  }) => { root: HTMLElement };
    leafButtonBig: (args: { title: string, icon?: string, text?: string, extraStyles: string[] }) => { root: HTMLElement };
    leafButtonBigView: (args: {  }) => { root: HTMLElement };
    leafButtonBigDelete: (args: {  }) => { root: HTMLElement };
    leafButtonBigRevert: (args: {  }) => { root: HTMLElement };
    leafButtonBigCommit: (args: {  }) => { root: HTMLElement };
    leafMediaImg: (args: { src: string }) => { root: HTMLElement };
    leafMediaAudio: (args: { src: string }) => { root: HTMLElement };
    leafMediaVideo: (args: { src: string }) => { root: HTMLElement };
    contPageHome: (args: {  }) => { root: HTMLElement };
    leafLogsLine: (args: { stamp: string, text: string }) => { root: HTMLElement };
    contPageLogs: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    leafInputText: (args: { id?: string, title: string, value: string }) => { root: HTMLElement };
    leafInputNumber: (args: { id?: string, title: string, value: string }) => { root: HTMLElement };
    leafInputBool: (args: { id?: string, title: string, value: boolean }) => { root: HTMLElement };
    leafInputDate: (args: { id?: string, title: string, value: string }) => { root: HTMLElement };
    leafInputTime: (args: { id?: string, title: string, value: string }) => { root: HTMLElement };
    leafInputDatetime: (args: { id?: string, title: string, value: string }) => { root: HTMLElement };
    leafInputColor: (args: { id?: string, title: string, value: string }) => { root: HTMLElement };
    leafInputEnum: (args: { id?: string, title: string, options: {[k: string]: string}, value: string }) => { root: HTMLElement };
    leafInputTextMedia: (args: { id?: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement, media: HTMLElement };
    leafInputFile: (args: { id?: string, title: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPair: (args: { label: string, inputId: string, input: HTMLElement }) => { root: HTMLElement };
    leafInputPairText: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairNumber: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairBool: (args: { id: string, title: string, value: boolean }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairDate: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairTime: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairDatetime: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairColor: (args: { id: string, title: string, value: string }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairEnum: (args: { id: string, title: string, value: string, options: {[k: string]: string} }) => { root: HTMLElement, input: HTMLElement };
    leafInputPairFile: (args: { id: string, title: string }) => { root: HTMLElement, input: HTMLElement };
    contPageView: (args: { transport?: HTMLElement, params: HTMLElement[], rows: HTMLElement }) => { root: HTMLElement };
    contBarViewTransport: (args: {  }) => { root: HTMLElement, buttonShare: HTMLElement, buttonPrev: HTMLElement, buttonNext: HTMLElement, buttonPlay: HTMLElement, seekbar: HTMLElement, seekbarFill: HTMLElement, seekbarLabel: HTMLElement };
    contViewRootRows: (args: { rows: HTMLElement[] }) => { root: HTMLElement };
    contViewRow: (args: { blocks: HTMLElement[] }) => { root: HTMLElement };
    contViewBlock: (args: { children: HTMLElement[], width?: string }) => { root: HTMLElement };
    contMediaFullscreen: (args: { media: HTMLElement }) => { root: HTMLElement, buttonClose: HTMLElement, buttonFullscreen: HTMLElement, seekbar: HTMLElement, seekbarFill: HTMLElement, seekbarLabel: HTMLElement };
    contModalViewShare: (args: { qr: HTMLElement, link: string }) => { root: HTMLElement, buttonClose: HTMLElement, buttonUnshare: HTMLElement };
    contViewList: (args: { direction: Direction, transAlign: TransAlign, convScroll: boolean, convSizeMax?: string, transSizeMax?: string, children: HTMLElement[], gap?: string, wrap: boolean }) => { root: HTMLElement };
    contViewTable: (args: { orientation: Orientation, convScroll: boolean, convSizeMax?: string, transSizeMax?: string, children: HTMLElement[][], gap?: string }) => { root: HTMLElement };
    leafViewImage: (args: { transAlign: TransAlign, src: string, link?: string, text?: string, width?: string, height?: string }) => { root: HTMLElement };
    leafViewVideo: (args: { transAlign: TransAlign, src: string, link?: string, text?: string, width?: string, height?: string }) => { root: HTMLElement };
    leafViewAudio: (args: { transAlign: TransAlign, direction: Direction, src: string, link?: string, text?: string, length?: string }) => { root: HTMLElement };
    leafViewIcon: (args: { icon: string, link?: string, width?: string, height?: string, color?: string, transAlign: TransAlign, orientation: Orientation }) => { root: HTMLElement };
    leafViewText: (args: { transAlign: TransAlign, orientation: Orientation, text: string, fontSize?: string, convSizeMax?: string, convSizeMode?: TextSizeMode, link?: string, color?: string }) => { root: HTMLElement };
    leafViewPlayButton: (args: { transAlign: TransAlign, orientation: Orientation, image?: string, width?: string, height?: string }) => { root: HTMLElement };
    leafViewColor: (args: { transAlign: TransAlign, color: string, width: string, height: string }) => { root: HTMLElement };
    leafViewDatetime: (args: { transAlign: TransAlign, orientation: Orientation, value: string, fontSize?: string, color?: string }) => { root: HTMLElement };
    leafViewDate: (args: { transAlign: TransAlign, orientation: Orientation, value: string, fontSize?: string, color?: string }) => { root: HTMLElement };
    leafViewTime: (args: { transAlign: TransAlign, orientation: Orientation, value: string, fontSize?: string, color?: string }) => { root: HTMLElement };
    contMediaComicOuter: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contMediaComicInner: (args: { minAspectX: string, minAspectY: string, children: HTMLElement[], rtl: boolean }) => { root: HTMLElement, contScroll: HTMLElement };
    leafMediaComicMidPad: (args: {  }) => { root: HTMLElement };
    leafMediaComicEndPad: (args: {  }) => { root: HTMLElement };
    leafMediaComicPage: (args: { src: string, aspectX: string, aspectY: string }) => { root: HTMLElement };
    contPageForm: (args: { entries: HTMLElement[], barChildren: HTMLElement[] }) => { root: HTMLElement };
    leafFormComment: (args: { text: string }) => { root: HTMLElement };
    contPageNodeSectionRel: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contNodeRowIncoming: (args: { children: HTMLElement[], new: boolean }) => { root: HTMLElement };
    contNodeRowOutgoing: (args: { children: HTMLElement[], new: boolean }) => { root: HTMLElement };
    contNodeSectionCenter: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    contPageNodeView: (args: { children: HTMLElement[] }) => { root: HTMLElement, body: HTMLElement };
    leafNodeViewPredicate: (args: { value: string }) => { root: HTMLElement };
    leafNodeViewNodeText: (args: { value: string, link?: string }) => { root: HTMLElement };
    contNodeToolbar: (args: { left: HTMLElement[], right: HTMLElement[] }) => { root: HTMLElement };
    leafNodeViewToolbarDownloadLinkButton: (args: { link: string }) => { root: HTMLElement };
    leafNodeViewToolbarHistoryLinkButton: (args: { link: string }) => { root: HTMLElement };
    leafNodeViewToolbarEditLinkButton: (args: { link: string }) => { root: HTMLElement };
    leafNodeViewToolbarGoLinkButton: (args: { link: string }) => { root: HTMLElement };
    contPageNodeEdit: (args: { barChildren: HTMLElement[], children: HTMLElement[] }) => { root: HTMLElement, body: HTMLElement };
    contNodeRowIncomingAdd: (args: { hint: string }) => { root: HTMLElement, button: HTMLElement };
    contNodeRowOutgoingAdd: (args: { hint: string }) => { root: HTMLElement, button: HTMLElement };
    leafNodeEditNode: (args: { inputType: HTMLElement, inputValue: HTMLElement }) => { root: HTMLElement };
    leafNodeEditPredicate: (args: { value: string }) => { root: HTMLElement };
    leafNodeEditNumberTextCenter: (args: { total: number }) => { root: HTMLElement };
    leafNodeEditToolbarFillToggle: (args: {  }) => { root: HTMLElement };
    leafNodeEditToolbarRevertButton: (args: {  }) => { root: HTMLElement };
    leafNodeEditToolbarDeleteToggle: (args: {  }) => { root: HTMLElement };
    leafNodeEditToolbarViewLinkButton: (args: { link: string }) => { root: HTMLElement };
    leafNodeEditToolbarCountText: (args: {  }) => { root: HTMLElement };
    contPageHistory: (args: { barChildren: HTMLElement[], children: HTMLElement[] }) => { root: HTMLElement, body: HTMLElement };
    contHistoryCommit: (args: { stamp: string, desc: string }) => { root: HTMLElement };
    contHistorySubject: (args: { center: HTMLElement[] }) => { root: HTMLElement };
    contHistoryPredicateObjectRemove: (args: { children: HTMLElement[] }) => { root: HTMLElement, button: HTMLElement };
    contHistoryPredicateObjectAdd: (args: { children: HTMLElement[] }) => { root: HTMLElement, button: HTMLElement };
    contPageQuery: (args: { initialQuery: string, jsonTab: HTMLElement[], downloadTab: HTMLElement[], editTab: HTMLElement[] }) => { root: HTMLElement, query: HTMLElement, prettyResults: HTMLElement };
    contPageQueryTabJson: (args: {  }) => { root: HTMLElement, jsonResults: HTMLElement, downloadButton: HTMLElement, copyButton: HTMLElement };
    contPageQueryTabEdit: (args: { children: HTMLElement[], barChildren: HTMLElement[] }) => { root: HTMLElement, editBar: HTMLElement };
    contQueryPrettyRow: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    leafQueryPrettyV: (args: { value: string, link?: string }) => { root: HTMLElement };
    leafQueryPrettyMediaV: (args: { value: HTMLElement, link: string }) => { root: HTMLElement };
    leafQueryPrettyInlineKV: (args: { key: string, value: string, link?: string }) => { root: HTMLElement };
    leafQueryPrettyMediaKV: (args: { key: string, value: HTMLElement, link: string }) => { root: HTMLElement };
    contPageQueryTabDownloadV: (args: {  }) => { root: HTMLElement };
    contPageQueryTabDownloadKV: (args: {  }) => { root: HTMLElement, downloadField: HTMLElement, downloadPattern: HTMLElement, downloadResults: HTMLElement };
    leafQueryDownloadRow: (args: { link: string, filename: string }) => { root: HTMLElement };
    contBarMenu: (args: { children: HTMLElement[] }) => { root: HTMLElement };
    leafMenuBarButtonLogin: (args: {  }) => { root: HTMLElement };
    leafMenuBarButtonLogout: (args: {  }) => { root: HTMLElement };
    contMenuBody: (args: { children: HTMLElement[], user: string, barChildren: HTMLElement[] }) => { root: HTMLElement };
    contMenuGroup: (args: { title: string, children: HTMLElement[] }) => { root: HTMLElement };
    leafMenuLink: (args: { title: string, href: string }) => { root: HTMLElement };
    appMain: (args: { mainTitle: HTMLElement, mainBody: HTMLElement, menuBody: HTMLElement }) => { root: HTMLElement, admenuButton: HTMLElement };
    contBarMain: (args: { leftChildren: HTMLElement[], leftMidChildren: HTMLElement[], midChildren: HTMLElement[], rightMidChildren: HTMLElement[], rightChildren: HTMLElement[] }) => { root: HTMLElement };
    appLinkPerms: (args: {  }) => { root: HTMLElement, button: HTMLElement };
    appLink: (args: {  }) => { root: HTMLElement, displayUnder: HTMLElement, display: HTMLElement, displayOver: HTMLElement, albumArtist: HTMLElement, title: HTMLElement };
};