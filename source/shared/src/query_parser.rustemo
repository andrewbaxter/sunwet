QUERY: CHAIN SORT_QUERY? ;

CHAIN: CHAIN_HEAD CHAIN_TAIL ;
CHAIN_HEAD: ROOT? STEP* ;
CHAIN_TAIL: sym_open_curly CHAIN_BIND* sym_end_curly ;

ROOT: VAL | ROOT_SEARCH ;
ROOT_SEARCH: kw_search STR_PARAM_VAL ;

STEP: STEP_SPECIFIC SORT_STEP? FIRST? ;
STEP_SPECIFIC: STEP_MOVE_UP | STEP_MOVE_DOWN | STEP_RECURSE | STEP_JUNCT_AND | STEP_JUNCT_OR ;
STEP_MOVE_DOWN: sym_step_move_down STR_PARAM_VAL FILTER? ;
STEP_MOVE_UP: sym_step_move_up STR_PARAM_VAL FILTER? ;
STEP_RECURSE: sym_step_recurse sym_open_paren STEP* sym_end_paren ;
STEP_JUNCT_AND: sym_step_junct_and sym_open_paren JUNCT_SUBCHAIN+ sym_end_paren ;
STEP_JUNCT_OR: sym_step_junct_or sym_open_paren JUNCT_SUBCHAIN+ sym_end_paren ;

JUNCT_SUBCHAIN: sym_open_paren CHAIN_HEAD sym_end_paren ;

SORT_STEP: SORT_STEP_ASC | SORT_STEP_DESC ;
SORT_STEP_ASC: kw_sort_asc ;
SORT_STEP_DESC: kw_sort_desc ;

FIRST: kw_first ;

FILTER: FILTER_EXISTS | FILTER_NOT_EXISTS | FILTER_JUNCT_AND | FILTER_JUNCT_OR ;
FILTER_EXISTS: sym_open_exist STEP* FILTER_SUFFIX? sym_end_paren ;
FILTER_NOT_EXISTS: sym_open_not_exist STEP* FILTER_SUFFIX? sym_end_paren ;
FILTER_SUFFIX: FILTER_SUFFIX_SIMPLE | FILTER_SUFFIX_LIKE ;
FILTER_SUFFIX_SIMPLE: FILTER_OP VAL ;
FILTER_SUFFIX_LIKE: sym_op_like STR_PARAM_VAL ;
FILTER_OP: sym_op_eq | sym_op_neq | sym_op_gt | sym_op_gte | sym_op_lt | sym_op_lte ;
FILTER_JUNCT_AND: sym_open_junct_and FILTER+ sym_end_paren ;
FILTER_JUNCT_OR: sym_open_junct_or FILTER+ sym_end_paren ;

CHAIN_BIND: CHAIN_BIND_CURRENT | CHAIN_BIND_SUBCHAIN ;
CHAIN_BIND_CURRENT: sym_bind ident ;
CHAIN_BIND_SUBCHAIN: sym_open_paren CHAIN sym_end_paren ;

SORT_QUERY: SORT_QUERY_PAIRS | kw_sort_random;
SORT_QUERY_PAIRS: SORT_QUERY_PAIR+ ;
SORT_QUERY_PAIR: SORT_QUERY_PAIR_ASC | SORT_QUERY_PAIR_DESC ;
SORT_QUERY_PAIR_ASC: kw_sort_asc ident ;
SORT_QUERY_PAIR_DESC: kw_sort_desc ident ;

STR_VAL: str_ ;
STR_PARAM_VAL: str_ | param ;
VAL: str_ | num | true_ | false_ | null | json | param;

terminals

kw_search: "search";
kw_first: "first";
kw_sort_asc: "asc";
kw_sort_desc: "desc";
kw_sort_random: "shuffle";

sym_bind: "=>";
sym_step_move_down: "->";
// Trochus operator
sym_step_move_up: "-<";
// Uchiko operator
sym_step_recurse: "-*";
sym_step_junct_and: "-&";
sym_open_junct_and: "&(";
sym_step_junct_or: "|(";
// Crepe operator
sym_open_junct_or: "-|";
sym_open_exist: "?(";
sym_open_not_exist: "!(";
sym_open_paren: "(";
sym_end_paren: ")";
sym_open_curly: "{";
sym_end_curly: "}";
sym_op_eq: "==";
sym_op_neq: "!=";
sym_op_gt: ">";
sym_op_gte: ">=";
sym_op_lt: "<";
sym_op_lte: "<=";
sym_op_like: "~=";

num: /-?\d+(.\d+)?/;
str_: /"([^"\\]|\\["\\bnfrt]|u[a-fA-F0-9]{4})*"/;
true_: 'true';
false_: 'false';
null: 'null';
json: /v(#+).*?(\2)/;

param: /[$][a-zA-Z_][a-zA-Z0-9_-]*/;
ident: /[a-zA-Z_][a-zA-Z0-9_-]*/;